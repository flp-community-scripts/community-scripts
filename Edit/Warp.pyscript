"""flp
Title: Warp
Author: BinaryBorn
Category: Edit
Version: 1.3
License: ISC

Description: 
Time warp score.

Changelog:
v1.0 (2023-07-14)
  - initial version

v1.1 (2023-07-17)
  - replaced tension function

v1.2 (2023-10-16)
  - added ISC license text

v1.3 (2024-09-12)
  - added hints
"""

import flpianoroll as flp
import math

def getTimeRange(notes: list[flp.Note]) -> tuple[int, int]:
  """Returns the time range spanning notes.
  """
  if len(notes) == 0: return (0, 0)
  # find first starting and last ending note
  first = min(notes, key=lambda n: n.time)
  last = max(notes, key=lambda n: n.time + n.length)
  # return start and end time
  return (first.time, last.time + last.length)

def Tension(value: float, rate: float, knob=True):
  """Applies the FL Studio Tension function to a value.

  Args:
    value (float): value to skew
    rate (float): tension rate
    knob (bool): if True, function behaves like the one behind knobs (e.g. scale levels), if False, it behaves like the one in Formula Controller
  """
  if rate == 0: return value
  # rate mapping
  R = rate
  if not knob and rate > 0:
    R = math.log2(rate + 1) / 10
  elif not knob and rate < 0:
    R = -math.log2(-rate + 1) / 10
  # f(x,R) = (2^(-10*R*x)-1)/(2^(-10*R)-1)
  return (pow(2, -10 * R * value) - 1) / (pow(2, -10 * R) - 1)


def createDialog():
  form = flp.ScriptDialog("Warp","Time warp score"
  + "\r\n\r\nv1.3 (2024-09-12)")
  form.AddInputKnob('Warp', 0, -1, 1, hint='Warp amount')
  
  return form

def apply(form: flp.ScriptDialog):
  warp = float(form.GetInputValue('Warp'))

  # get current notes
  notes = [flp.score.getNote(i) for i in range(flp.score.noteCount)]

  times = getTimeRange(notes)
  t0 = times[0]
  t1 = times[1]
  dt = t1 - t0

  # warp start and end times
  for note in notes:
    nt0 = note.time - t0
    nt1 = nt0 + note.length
    nt0 = round(Tension(nt0 / dt, warp) * dt)
    nt1 = round(Tension(nt1 / dt, warp) * dt)
    # keep notes length at 1 min
    if nt0 == nt1:
      # positive warp: move note start times forwards
      if warp > 0:
        nt0 -= 1
      # negative warp: move note end times back
      else:
        nt1 += 1
    note.time = nt0 + t0
    note.length = nt1 - nt0
