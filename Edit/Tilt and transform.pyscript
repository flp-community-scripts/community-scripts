"""flp
Title: Tilt and transform
Author: BinaryBorn
Category: Edit
Version: 1.1
License: ISC

Description: 
Tilt and transform score.

Changelog:
v1.0 (2023-10-16)
  - initial version

v1.1 (2024-09-12)
  - added hints
"""

import flpianoroll as flp
import math

class Scale:
  __slots__ = ['time', 'notes']
  def __init__(self, time: int, notes: list[bool]):
    self.time = time
    self.notes = notes

# gathering markers is only required once - they don't update as long as script is active

scales: list[Scale] = []

for m in range(flp.score.markerCount):
  marker = flp.score.getMarker(m)
  # scale marker
  if marker.mode == 12:
    # scale_helper is a string in form "0,1,0,1,0,0,1,0,1,0,1,0" telling which notes (starting from C) are in the scale (0) and which aren't (1)
    # transform into array of in scale (True), not in scale (False)
    splat = marker.scale_helper.split(',')
    notes = [s == '0' for s in splat]
    # "default" scale will be all False - don't append that, invert instead
    if not max(notes) == 0:
      # append that with its starting time
      scales.append(Scale(
        time = marker.time,
        notes = notes
      ))
    else:
      scales.append(Scale(
        time = marker.time,
        notes = [True, True, True, True, True, True, True, True, True, True, True, True]
      ))


def getTimeRange(notes: list[flp.Note]) -> tuple[int, int]:
  """Returns the time range spanning notes.
  """
  if len(notes) == 0: return (0, 0)
  # find first starting and last ending note
  first = min(notes, key=lambda n: n.time)
  last = max(notes, key=lambda n: n.time + n.length)
  # return start and end time
  return (first.time, last.time + last.length)

def Tension(value: float, rate: float, knob=True):
  """Applies the FL Studio Tension function to a value.

  Args:
    value (float): value to skew
    rate (float): tension rate
    knob (bool): if True, function behaves like the one behind knobs (e.g. scale levels), if False, it behaves like the one in Formula Controller
  """
  if rate == 0: return value
  # rate mapping
  R = rate
  if not knob and rate > 0:
    R = math.log2(rate + 1) / 10
  elif not knob and rate < 0:
    R = -math.log2(-rate + 1) / 10
  # f(x,R) = (2^(-10*R*x)-1)/(2^(-10*R)-1)
  return (pow(2, -10 * R * value) - 1) / (pow(2, -10 * R) - 1)

def relevantScaleAt(time: int):
  """Returns scale active at given time (or "Default" all True as fallback).

  Args:
      time (int): time in ticks
  """
  s = Scale(
    time = 0,
    notes = [True, True, True, True, True, True, True, True, True, True, True, True]
  )

  # find latest scale before time
  for scale in scales:
    if time >= scale.time: s = scale

  return s

def transposeIntoScale(number: int, scale: Scale):
  """Transposes a given note number into scale.

  Args:
      number (int): source note number
      scale (Scale): scale to transpose into

  Returns:
      int: target note number
  """
  # look for "True" in scale above and below original note with increasing distance
  s = scale.notes
  for t in range(12):
    if s[(number + t) % 12]: return number + t
    if s[(number - t + 12) % 12]: return number - t
  # return original if nothing was found
  return number


def createDialog():
  form = flp.ScriptDialog("Tilt and transform","Tilt and transform score."
  + "\r\nAxis is MIDI note and describes the axis for scaling transformations."
  + "\r\n\r\nv1.1 (2024-09-12), BinaryBorn")
  form.AddInputKnobInt('Axis', 60, 0, 131, hint='Axis for scaling (MIDI note)')
  form.AddInputKnobInt('Tilt', 0, -48, 48, hint='Tilt to horizon')
  form.AddInputKnob('Scale start', 1, -2, 2, hint='Start Y-scaling factor')
  form.AddInputKnob('Scale end', 1, -2, 2, hint='End Y-scaling factor')
  form.AddInputKnob('Tension', 0, -1, 1, hint='Transformation tension')
  form.AddInputCombo('Snap to scale', ['None', 'Notes', 'Scale'], 1, hint='How to snap notes')
  
  return form

def apply(form: flp.ScriptDialog):
  axis = int(form.GetInputValue('Axis'))
  tilt = int(form.GetInputValue('Tilt'))
  scale0 = float(form.GetInputValue('Scale start'))
  scale1 = float(form.GetInputValue('Scale end'))
  snap = int(form.GetInputValue('Snap to scale'))
  tension = float(form.GetInputValue('Tension'))

  # get current notes
  notes = [flp.score.getNote(i) for i in range(flp.score.noteCount)]

  times = getTimeRange(notes)
  t0 = times[0]
  t1 = times[1]
  dt = t1 - t0
  
  dscale = scale1 - scale0

  # work in cents for everything vertical (e.g. tilt)
  tilt *= 100
  axis *= 100

  # move notes up and down, use note center as anchor
  for note in notes:
    nt0 = note.time - t0
    ntc = nt0 + note.length / 2
    ntrel = ntc / dt

    # application factor
    f = Tension(ntrel, tension)

    # tilt
    centsT = f * tilt
    # scale
    fscale = scale0 + f * dscale
    val0 = note.number * 100
    val1 = axis + fscale * (val0 - axis)
    centsS = val1 - val0
    
    # total movement
    centsTot = centsT + centsS

    # move note
    dnotes = round(centsTot / 100)
    dfine = centsTot - dnotes * 100

    note.number += dnotes
    if snap == 0:
      note.pitchofs += round(dfine / 10)
    elif snap == 2:
      scale = relevantScaleAt(nt0)
      note.number = transposeIntoScale(note.number, scale)
