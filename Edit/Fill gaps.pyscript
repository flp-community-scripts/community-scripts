"""flp
Title: Fill gaps
Author: BinaryBorn
Category: Edit
Version: 1.1
License: ISC

Description: 
Fill gaps with default notes.

Changelog:
v1.0 (2024-01-16)
  - initial version

v1.1 (2024-03-15)
  - ADDED typings
  - CHANGED note properties now consider current defaults
"""

import flpianoroll as flp

def getTimeRange(notes: list[flp.Note]) -> tuple[int, int]:
  """Returns the time range spanning notes.
  """
  if len(notes) == 0: return (0, 0)
  # find first starting and last ending note
  first = min(notes, key=lambda n: n.time)
  last = max(notes, key=lambda n: n.time + n.length)
  # return start and end time
  return (first.time, last.time + last.length)

def getNoteFollowing(notes: list[flp.Note], time: int) -> flp.Note | None:
  """Returns the note following given time (as in nearest following).
  If there are multiple notes equally close, it takes the longest one.
  Expects notes to be sorted by start time.
  """
  next = None
  for n in notes:
    # already at one after next
    if next and n.time > next.time: return next
    # possible candidate for next
    if n.time > time:
      # always remember first candidate, others only if they last longer
      if not next or n.length > next.length:
        next = n
  return next

def getNoteAt(notes: list[flp.Note], time: int) -> flp.Note | None:
  """Returns the note playing at given time.
  If there are multiple notes playing, it takes the one ending the latest.Expects notes to be sorted by start time.
  """
  current = None
  for n in notes:
    # already after time
    if n.time > time: return current
    # possible candidate for current
    if n.time <= time and (n.time + n.length) > time:
      # always remember first candidate, others only if they last longer
      if not current or (n.time + n.length) > (current.time + current.length):
        current = n
  return current

def apply():
  # get current notes
  notes = [flp.score.getNote(i) for i in range(flp.score.noteCount)]
  # order by start time
  notes.sort(key=lambda n: (n.time, n.number))

  if not notes: return

  # find range to fill
  selection = flp.score.getTimelineSelection()
  # ... fall back to notes' range when no timeline selection was made
  if (selection[1] == -1): selection = getTimeRange(notes)
  selt0 = selection[0]
  selt1 = selection[1]
  seldt = selt1 - selt0

  cursor = selt0
  addNotes: list[flp.Note] = []
  
  while True:
    # currently playing note
    current = getNoteAt(notes, cursor)

    if current:
      # advance cursor to current's end
      cursor = current.time + current.length
      continue

    # next starting note
    next = getNoteFollowing(notes, cursor)

    if not next: break

    # gap from cursor to next note, fill
    if next.time > cursor:
      note = flp.score.getDefaultNoteProperties().clone()
      note.number = 60
      note.time = cursor
      note.length = next.time - cursor
      note.selected = True
      addNotes.append(note)
      # advance cursor to next's end
      cursor = next.time + next.length

  # gap from cursor to selection end, fill
  if selt1 > cursor:
    note = flp.score.getDefaultNoteProperties().clone()
    note.number = 60
    note.time = cursor
    note.length = selt1 - cursor
    note.selected = True
    addNotes.append(note)

  # deselect all existing notes
  for n in notes:
    n.selected = False

  # add filler notes
  for n in addNotes:
    flp.score.addNote(n)         
