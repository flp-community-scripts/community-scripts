"""
ISC License

Copyright 2023 Olivier Stuker a.k.a. BinaryBorn

Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
"""

import flpianoroll as flp
import math
import _random

random = _random.Random()

"""
Echo
by: BinaryBorn

2024-01-16
  - initial version

2024-01-26
  - added pitch, fcut, fres
  - added group option
  - added per note randomization
  - added pan shift
  - changed name of existing pan control to stereo control
  - changed delay time range, including negative time

2024-02-02
  - added round robin (groups) color mode option
  - added pitch snap options
  - added legato option
  - added descriptions for knob values

2024-03-08
  - FIXED typings for Python engine upgrade
"""

# gathering markers is only required once - they don't update as long as script is active

class Scale:
  __slots__ = ['time', 'notes']
  def __init__(self, time: int, notes: list[bool]):
    self.time = time
    self.notes = notes

scales: list[Scale] = []

for m in range(flp.score.markerCount):
  marker = flp.score.getMarker(m)
  # scale marker
  if marker.mode == 12:
    # scale_helper is a string in form "0,1,0,1,0,0,1,0,1,0,1,0" telling which notes (starting from C) are in the scale (0) and which aren't (1)
    # transform into array of in scale (True), not in scale (False)
    splat = marker.scale_helper.split(',')
    notes = [s == '0' for s in splat]
    # "default" scale will be all False - don't append that, invert instead
    if not max(notes) == 0:
      # append that with its starting time
      scales.append(Scale(
        time = marker.time,
        notes = notes
      ))
    else:
      scales.append(Scale(
        time = marker.time,
        notes = [True, True, True, True, True, True, True, True, True, True, True, True]
      ))

# return scale active at "time" (use "Default" as fallback)
def relevantScaleAt(time: int):
  s = Scale(
    time = 0,
    notes = [True, True, True, True, True, True, True, True, True, True, True, True]
  )

  # find latest scale before time
  for scale in scales:
    if time >= scale['time']: s = scale

  return s

# transpose note into scale
def transposeIntoScale(number: int, scale: Scale):
  # look for "True" in scale above and below original note with increasing distance
  s = scale.notes
  for t in range(12):
    if s[(number + t) % 12]: return number + t
    if s[(number - t + 12) % 12]: return number - t
  # return original if nothing was found
  return number


def createDialog():
  form = flp.ScriptDialog("Echo","Create an echo/delay effect in your score."
  + "\r\nDelay time is in 16th."
  + "\r\nThe knob ranges for randomness are as follows:"
  + "\r\nTime \u00b11 bar; pitch \u00b112 semitones; rest \u00b110% f.s."
  + "\r\n\r\n2024-03-08, BinaryBorn")
  form.AddInputKnob('Delay time', 4, -16, 16)
  form.AddInputKnobInt('Echos', 4, 1, 128)
  form.AddInputCombo('Velocity mode', ['exponential', 'linear'], 0)
  form.AddInputKnob('Velocity multiplier', 0.8, 0, 2)
  form.AddInputCombo('Stereo mode', ['normal', 'ping pong'], 0)
  form.AddInputKnob('Stereo multiplier', 1, 0, 2)
  form.AddInputKnob('Pan shift', 0, -1, 1)
  form.AddInputKnob('Pitch shift', 0, -12, 12)
  form.AddInputKnob('Mod X shift', 0, -1, 1)
  form.AddInputKnob('Mod Y shift', 0, -1, 1)
  form.AddInputCombo('Note color mode', ['none', 'set', 'round robin (echos)', 'round robin (groups)'], 0)
  form.AddInputKnobInt('Note color offset', 0, 0, 15)
  form.AddInputCheckbox('Drop silent notes', True)
  form.AddInputCheckbox('Group echos', True)
  form.AddInputCombo('Pitch snapping', ['none', 'whole note', 'scale (at echo)', 'scale (at origin)'], 0)
  form.AddInputCheckbox('Legato echos', False)
  # all the randomization stuff
  form.AddInputCheckbox('Randomize', False)
  form.AddInputKnobInt('Seed', 0, 0, 999)
  form.AddInputKnob('Rnd time', 0, 0, 1)
  form.AddInputKnob('Rnd velocity', 0, 0, 1)
  form.AddInputKnob('Rnd pan', 0, 0, 1)
  form.AddInputKnob('Rnd pitch', 0, 0, 1)
  form.AddInputKnob('Rnd mod X', 0, 0, 1)
  form.AddInputKnob('Rnd mod Y', 0, 0, 1)
  
  return form

def apply(form):
  # get current notes
  notes = [flp.score.getNote(i) for i in range(flp.score.noteCount)]
  # order by start time
  notes.sort(key=lambda n: (n.time, n.number))

  if not notes: return

  ppq = flp.score.PPQ
  tdelay = float(form.GetInputValue('Delay time')) / 4 * ppq
  numEchos = int(form.GetInputValue('Echos'))
  velMode = int(form.GetInputValue('Velocity mode'))
  velMul = float(form.GetInputValue('Velocity multiplier'))
  sterMode = int(form.GetInputValue('Stereo mode'))
  sterMul = float(form.GetInputValue('Stereo multiplier'))
  panShft = float(form.GetInputValue('Pan shift'))
  pitchShft = float(form.GetInputValue('Pitch shift')) * 100
  pitchMode = int(form.GetInputValue('Pitch snapping'))
  modxShft = float(form.GetInputValue('Mod X shift'))
  modyShft = float(form.GetInputValue('Mod Y shift'))
  colMode = int(form.GetInputValue('Note color mode'))
  colOff = int(form.GetInputValue('Note color offset'))
  dropSilent = bool(form.GetInputValue('Drop silent notes'))
  groupEchos = bool(form.GetInputValue('Group echos'))
  optLegato = bool(form.GetInputValue('Legato echos'))

  randomize = bool(form.GetInputValue('Randomize'))
  rndTime = float(form.GetInputValue('Rnd time'))
  rndVel = float(form.GetInputValue('Rnd velocity'))
  rndPan = float(form.GetInputValue('Rnd pan'))
  rndPitch = float(form.GetInputValue('Rnd pitch'))
  rndModx = float(form.GetInputValue('Rnd mod X'))
  rndMody = float(form.GetInputValue('Rnd mod Y'))

  # always seed with user provided seed
  seed = int(form.GetInputValue('Seed'))
  random.seed(seed)

  # store initial values for randomizer
  _tdelay = tdelay
  _velMul = velMul
  _panShft = panShft
  _pitchShft = pitchShft
  _modxShft = modxShft
  _modyShft = modyShft
  def unityRandom():
    return 2 * (random.random() - 0.5)

  addNotes: list[flp.Note] = []
  grpIdx = 0
  prevNote = None # keep track of previous note for legato option
  origLength = None

  # clone notes/create echos
  for n in notes:
    prevNote = n
    origLength = n.length
    # per note randomization (not per echo), range selected at discretion 
    if randomize:
      tdelay = _tdelay + rndTime * 16 * unityRandom() / 4 * ppq
      velMul = _velMul + rndVel / 10 * unityRandom()
      panShft = _panShft + rndPan / 10 * unityRandom()
      pitchShft = _pitchShft + rndPitch * 1200 * unityRandom()
      modxShft = _modxShft + rndModx / 10 * unityRandom()
      modyShft = _modyShft + rndMody / 10 * unityRandom()
    # in round robin (groups) mode, adapt color before cloning
    if colMode == 3:
      n.color = (colOff + grpIdx) % 16
    # group index must be >0 in order to group notes
    grpIdx += 1
    for i in range(1, numEchos):
      note = n.clone()
      note.time += round(tdelay * i)
      # legato? shorten overlapping notes
      if optLegato:
        # reset this note's length to un-altered original length
        note.length = origLength
        # non-negative tdelay: shorten previous note
        if tdelay >= 0 and prevNote.time + prevNote.length > note.time:
          prevNote.length = max(note.time - prevNote.time, 1)
        # negative tdelay: shorten new note
        elif tdelay < 0 and note.time + note.length > prevNote.time:
          note.length = max(prevNote.time - note.time, 1)
      # adapt velocity
      if velMode == 0:
        note.velocity *= math.pow(velMul, i)
      else:
        note.velocity *= (1 + (velMul - 1) * i)
      note.velocity = min(max(note.velocity, 0), 1)
      # no need to proceed if one note is silent
      if dropSilent and round(note.velocity * 127) == 0: break
      # adapt panning
      dpan = note.pan - 0.5
      dpan *= math.pow(sterMul, i)
      if sterMode == 1 and i % 2 == 1:
        dpan *= -1
      note.pan = min(max(dpan + 0.5 + panShft * i, 0), 1)
      # adapt pitch (fine and coarse)
      # working in cents, then translate back to number + pitchofs
      pitch = 100 * note.number + note.pitchofs * 10
      pitch = min(max(pitch + pitchShft * i, 0), 12700)
      # no snapping: keep original note as long as pitchofs is below one octave
      if pitchMode == 0:
        tarnum = note.number
        tarofs = (pitch - tarnum * 100) / 10
        # introduce octave jumps if pitchofs becomes too large
        while abs(tarofs > 120):
          if tarofs > 0:
            tarnum += 12
            tarofs -= 120
          elif tarofs < 0:
            tarnum -= 12
            tarofs += 120
        note.number = tarnum
        note.pitchofs = round(tarofs)
      # snap to note: round note, minimize pitchofs
      elif pitchMode == 1:
        note.number = round(pitch / 100)
        note.pitchofs = round((pitch - note.number * 100) / 10)
      # snap to scale (at echo): snap note number, ignore pitchofs
      elif pitchMode == 2:
        note.number = transposeIntoScale(round(pitch / 100), relevantScaleAt(note.time))
      # snap to scale (at origin): snap note number, ignore pitchofs
      elif pitchMode == 3:
        note.number = transposeIntoScale(round(pitch / 100), relevantScaleAt(n.time))
      # adapt mod x, mod y
      note.fcut = min(max(note.fcut + modxShft * i, 0), 1)
      note.fres = min(max(note.fres + modyShft * i, 0), 1)
      # adapt color
      if colMode == 1:
        note.color = colOff
      elif colMode == 2:
        note.color = (colOff + i) % 16
      addNotes.append(note)
      prevNote = note
      # group (original note too)
      if groupEchos: note.group = grpIdx
    if groupEchos: n.group = grpIdx

  # add notes
  for n in addNotes:
    flp.score.addNote(n)         
