"""flp
Title: Accelerate
Author: BinaryBorn
Category: Edit
Version: 1.3
License: ISC

Description: 
Speed up or slow down score's playback rate.

Changelog:
v1.0 (2023-07-03)
  - initial version

v1.1 (2023-09-13)
  - added ISC license text

v1.2 (2024-03-08)
  - fixed typings for Python engine upgrade

v1.3 (2024-09-11)
  - added hints
"""

import flpianoroll as flp
import math

def getTimeRange(notes: list[flp.Note]) -> tuple[int, int]:
  """Returns the time range spanning notes.
  """
  if len(notes) == 0: return (0, 0)
  # find first starting and last ending note
  first = min(notes, key=lambda n: n.time)
  last = max(notes, key=lambda n: n.time + n.length)
  # return start and end time
  return (first.time, last.time + last.length)


def createDialog():
  expRange = 5
  mulRange = pow(2, expRange)
  form = flp.ScriptDialog("Accelerate","Speed up or slow down score's playback rate."
  + "\r\nRate is limited from \u00d7\u215f\u2083\u2082 to \u00d732."
  + "\r\nAcceleration is 'rate change per bar', on a logarithmic scale:"
  + "\r\nValue:    -5      -4      -3      -2      -1       0       1       2       3       4       5"
  + "\r\nRate:     \u00d7\u215f\u2083\u2082   \u00d7\u215f\u2081\u2086   \u00d7\u215b   \u00d7\u00bc   \u00d7\u00bd    \u00d71    \u00d72    \u00d74    \u00d78    \u00d716    \u00d732"
  + "\r\n\r\nv1.3 (2024-09-11), BinaryBorn")
  form.AddInputKnob('Acceleration', 0, -expRange, expRange, hint='Acceleration (rate change per bar)')
  form.AddInputCombo('Off limit notes', ['leave', 'mute', 'select'], 0, hint='What to do with off limit notes')
  form.AddInputKnob('Lower rate limit %', 100/mulRange, 100/mulRange, 100, hint='Lower rate limit (percentage)')
  form.AddInputKnob('Upper rate limit %', 100*mulRange, 100, 100*mulRange, hint='Upper rate limit (percentage)')
  
  return form

def apply(form: flp.ScriptDialog):
  # to find acceleration, go via target rate after 1 bar
  trExp = float(form.GetInputValue('Acceleration'))
  tr = pow(2, trExp)
  a_ = tr - 1
  # convert acc from %/bar to %/tick
  a = a_ / (4 * flp.score.PPQ)

  # don't do anything if there's no acceleration
  if a == 0: return

  # when the limit hits
  lim0 = float(form.GetInputValue('Lower rate limit %')) / 100
  lim1 = float(form.GetInputValue('Upper rate limit %')) / 100
  endrate = lim0 if a < 0 else lim1
  tlim = (endrate - 1) / a

  # where the limit hits
  slim = 1 / a * math.log(abs(a*tlim + 1))

  def sfromt(t: float):
    if t <= tlim:
      return 1 / a * math.log(abs(a*t + 1))
    else:
      return slim + (t - tlim) / endrate

  # off-limit-notes mode
  mode = int(form.GetInputValue('Off limit notes'))

  # get current notes
  notes = [flp.score.getNote(i) for i in range(flp.score.noteCount)]

  # time offset
  times = getTimeRange(notes)
  toffset = times[0]

  # stretch score
  for note in notes:
    t0 = note.time - toffset
    t1 = t0 + note.length

    s0 = round(sfromt(t0))
    s1 = round(sfromt(t1))

    note.time = s0 + toffset
    note.length = s1 - s0

    inlimit = t0 <= tlim
    if mode == 1:
      note.muted = not inlimit
    elif mode == 2:
      note.selected = not inlimit

