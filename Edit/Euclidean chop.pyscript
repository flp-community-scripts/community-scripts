"""
ISC License

Copyright 2023 Olivier Stuker a.k.a. BinaryBorn

Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
"""

import flpianoroll as flp

"""
Euclidean chop
idea: Trancit
code: BinaryBorn

2023-09-13
  - initial version

2023-09-14
  - added rotation

2024-03-08
  - FIXED typings for Python engine upgrade
"""

def createDialog():
  form = flp.ScriptDialog("Euclidean chop","Chop notes into given number of pieces."
  + "\r\nWhen quantizing, you might not get the number of notes you specified, due to quantizing."
  + "\r\nWhen quantizing, use 'Rotation' to adjust the resulting note patterns phase."
  + "\r\n\r\n2024-03-08, Trancit & BinaryBorn")
  form.AddInputKnobInt('Chops', 2, 2, 32)
  form.AddInputCombo('Quantization', ['off', '1/1 (1 bar)', '1/2', '1/3', '1/4 (1 beat)', '1/6', '1/8', '1/12', '1/16 (1 step)', '1/24', '1/32', '1/48', '1/64'], 0)
  form.AddInputKnobInt('Rotation', 0, -32, 32)
  
  return form

def apply(form):
  chops = int(form.GetInputValue('Chops'))
  quantization = int(form.GetInputValue('Quantization'))
  rotation = int(form.GetInputValue('Rotation'))
  quantize = (quantization != 0)
  quantTicks = int([1, 1, 1/2, 1/3, 1/4, 1/6, 1/8, 1/12, 1/16, 1/24, 1/32, 1/48, 1/64][quantization] * 4 * flp.score.PPQ)

  noteCount = flp.score.noteCount

  # get current notes
  notes = [flp.score.getNote(i) for i in range(noteCount)]

  newNotes: list[flp.Note] = []

  # go through all notes and replace by chopped copy
  for note in notes:
    # origin note
    t0 = note.time
    dt = note.length
    t1 = t0 + dt

    # chop note
    ticksPerChop = dt / chops
    idx = 0
    tused = 0
    chopNotes: list[flp.Note] = []
    while idx < chops:
      # chop start and end time
      s0 = int(t0 + ticksPerChop * idx)
      s1 = min(int(t0 + ticksPerChop * (idx + 1)), t1)
      # quantize if required
      if quantize:
        s0 = int(s0 / quantTicks) * quantTicks
        s1 = int(s1 / quantTicks) * quantTicks
        # prevent zero-length notes
        if s0 == s1:
          s1 += quantTicks

      # add note in free space
      if s0 >= tused:
        tused = s1

        snote = flp.Note()
        snote.number = note.number
        snote.time = s0
        snote.length = s1 - s0
        snote.pan = note.pan
        snote.velocity = note.velocity
        snote.release = note.release
        snote.color = note.color
        snote.fcut = note.fcut
        snote.fres = note.fres
        snote.pitchofs = note.pitchofs
        snote.muted = note.muted
        snote.selected = True

        chopNotes.append(snote)

      idx += 1

    # rotate chops
    chopCount = len(chopNotes)
    tc = t0
    for i in range(chopCount):
      itarget = (i - rotation) % chopCount
      if (itarget < 0): itarget += chopCount
      chop = chopNotes[itarget]
      chop.time = tc
      tc += chop.length
    
    # add chops
    newNotes += chopNotes

  # update score
  flp.score.clearNotes()
  for note in newNotes:
    flp.score.addNote(note)
