"""flp
Title: Euclidean chop
Author: Trancit (idea), BinaryBorn (code)
Category: Edit
Version: 1.4
License: ISC

Description: 
Chop notes into given number of pieces.

Changelog:
v1.0 (2023-09-13)
  - initial version

v1.1 (2023-09-14)
  - added rotation

v1.2 (2024-03-08)
  - fixed typings for Python engine upgrade

v1.3 (2024-07-08)
  - notes are now cloned using note.clone

v1.4 (2024-09-12)
  - added hints
"""

import flpianoroll as flp

def createDialog():
  form = flp.ScriptDialog("Euclidean chop","Chop notes into given number of pieces."
  + "\r\nWhen quantizing, you might not get the number of notes you specified, due to quantizing."
  + "\r\nWhen quantizing, use 'Rotation' to adjust the resulting note patterns phase."
  + "\r\n\r\nv1.4 (2024-09-12), Trancit & BinaryBorn")
  form.AddInputKnobInt('Chops', 2, 2, 32, hint='Number of pieces')
  form.AddInputCombo('Quantization', ['off', '1/1 (1 bar)', '1/2', '1/3', '1/4 (1 beat)', '1/6', '1/8', '1/12', '1/16 (1 step)', '1/24', '1/32', '1/48', '1/64'], 0, hint='Quantization size')
  form.AddInputKnobInt('Rotation', 0, -32, 32, hint='Phase rotation')
  
  return form

def apply(form: flp.ScriptDialog):
  chops = int(form.GetInputValue('Chops'))
  quantization = int(form.GetInputValue('Quantization'))
  rotation = int(form.GetInputValue('Rotation'))
  quantize = (quantization != 0)
  quantTicks = int([1, 1, 1/2, 1/3, 1/4, 1/6, 1/8, 1/12, 1/16, 1/24, 1/32, 1/48, 1/64][quantization] * 4 * flp.score.PPQ)

  noteCount = flp.score.noteCount

  # get current notes
  notes = [flp.score.getNote(i) for i in range(noteCount)]

  newNotes: list[flp.Note] = []

  # go through all notes and replace by chopped copy
  for note in notes:
    # origin note
    t0 = note.time
    dt = note.length
    t1 = t0 + dt

    # chop note
    ticksPerChop = dt / chops
    idx = 0
    tused = 0
    chopNotes: list[flp.Note] = []
    while idx < chops:
      # chop start and end time
      s0 = int(t0 + ticksPerChop * idx)
      s1 = min(int(t0 + ticksPerChop * (idx + 1)), t1)
      # quantize if required
      if quantize:
        s0 = int(s0 / quantTicks) * quantTicks
        s1 = int(s1 / quantTicks) * quantTicks
        # prevent zero-length notes
        if s0 == s1:
          s1 += quantTicks

      # add note in free space
      if s0 >= tused:
        tused = s1

        snote = note.clone()
        snote.time = s0
        snote.length = s1 - s0
        snote.selected = True

        chopNotes.append(snote)

      idx += 1

    # rotate chops
    chopCount = len(chopNotes)
    tc = t0
    for i in range(chopCount):
      itarget = (i - rotation) % chopCount
      if (itarget < 0): itarget += chopCount
      chop = chopNotes[itarget]
      chop.time = tc
      tc += chop.length
    
    # add chops
    newNotes += chopNotes

  # update score
  flp.score.clearNotes()
  for note in newNotes:
    flp.score.addNote(note)
