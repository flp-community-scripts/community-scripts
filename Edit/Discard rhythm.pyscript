"""flp
Title: Discard rhythm
Author: D3Mens (idea), BinaryBorn (code)
Category: Edit
Version: 1.2
License: ISC

Description: 
Discard rhythm","Discard score rhythm and spread notes equidistantly.

Changelog:
v1.0 (2024-08-26)
  - initial version

v1.1 (2024-08-28)
  - fixed merger of quickly played notes
  - added timeline selection support
  - added keep length option

v1.2 (2024-09-12)
  - added hints
"""

import flpianoroll as flp

class Event:
  __slots__ = ['time', 'type']
  def __init__(self, time: int, type: bool):
    self.time = time
    "time in ticks"
    self.type = type
    "note on (True), note off (False)"

def createDialog():
  form = flp.ScriptDialog("Discard rhythm","Discard score rhythm and spread notes equidistantly."
  + "\r\n\r\nv1.2 (2024-09-12), D3Mens & BinaryBorn")
  form.AddInputKnobInt('Distance', 1, 1, 16, hint='Spread distance')
  form.AddInputCombo('Distance unit', ['step', 'beat', 'bar'], 0, hint='Spread distance unit')
  form.AddInputKnob('Tolerance', 0, 0, 1, hint='Tolerance for same start time')
  form.AddInputCheckbox('Keep length', False, hint='Whether to keep note lengths')
  
  return form

def apply(form: flp.ScriptDialog):
  ppq = flp.score.PPQ
  selection = flp.score.getTimelineSelection()
  toffset = selection[0] if selection[1] != -1 else 0

  distBase = int(form.GetInputValue('Distance'))
  distMulOpt = int(form.GetInputValue('Distance unit'))
  distMul = [ppq // 4, ppq, ppq * 4][distMulOpt]
  dist = distBase * distMul
  # arbitrarily scale tolerance by one beat (current time scale)
  overlapTolerance = ppq * float(form.GetInputValue('Tolerance'))
  keepLengthOpt = bool(form.GetInputValue('Keep length'))

  notes = [flp.score.getNote(i) for i in range(flp.score.noteCount)]

  # collect all note events
  allEvents: list[Event] = []
  for n in notes:
    allEvents.extend([
      Event(n.time, True),
      Event(n.time + n.length, False),
    ])
  # sort strictly by time
  allEvents.sort(key=lambda e: e.time)
  # merge consecutive note on events in tolerance
  mergedEvents: list[Event] = []
  lastEvent: Event|None = None
  for e in allEvents:
    if (
      lastEvent is None or
      lastEvent.type == False or
      e.type == False or
      e.time > lastEvent.time + overlapTolerance
    ):
      mergedEvents.append(e)
      lastEvent = e
  # convert to list of times of note on events only
  events = [e.time for e in mergedEvents if e.type == True]

  def eventIndexForTime(t: int):
    """Returns the index of the last event before t"""
    # no need to check zeroth - is always equal to lowest possible t
    for i in range(1, len(events)):
      # past t, return one before
      if events[i] > t: return i-1
    # none past t, return last
    return len(events) - 1

  # distribute notes between events
  for n in notes:
    # quantize start and end time
    t0 = n.time
    t1 = t0 + n.length
    i0 = eventIndexForTime(t0)
    i1 = eventIndexForTime(t1) + 1 # "round up" end to next index
    # re-place
    t0n = i0 * dist
    t1n = i1 * dist
    n.time = t0n + toffset
    if not keepLengthOpt:
      n.length = t1n - t0n
