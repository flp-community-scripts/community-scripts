"""flp
Title: Reverse
Author: BinaryBorn
Category: Edit
Version: 1.3
License: ISC

Description: 
Reverses score preserving slide notes.

Changelog:
v1.0 (2023-07-02)
  - initial version

v1.1 (2023-07-17)
  - added note.release

v1.2 (2023-10-16)
  - added ISC license text

v1.3 (2024-07-08)
  - notes are now cloned using note.clone
"""

import flpianoroll as flp

def getTimeRange(notes: list[flp.Note]) -> tuple[int, int]:
  """Returns the time range spanning notes.
  """
  if len(notes) == 0: return (0, 0)
  # find first starting and last ending note
  first = min(notes, key=lambda n: n.time)
  last = max(notes, key=lambda n: n.time + n.length)
  # return start and end time
  return (first.time, last.time + last.length)

# No GUI required - scripts runs here

noteCount = flp.score.noteCount

allNotes = [flp.score.getNote(i) for i in range(noteCount)]
# order by start time
allNotes.sort(key=lambda n: (n.time, n.number))

times = getTimeRange(allNotes)
t0 = times[0]
t1 = times[1]

# do color group by color group (keeps the whole slides treatment a bit cleaner)
for color in range(16):
  notes = [n for n in allNotes if n.color == color]
  playNotes = [n for n in notes if n.slide == False]
  slideNotes = [n for n in notes if n.slide == True]

  # invert slides
  for s in slideNotes:
    # notes playing when slide starts === affected notes
    st0 = s.time
    affected = [n for n in playNotes if st0 >= n.time and st0 < n.time + n.length]
    if affected:
      # top note in affected notes === leading note
      affected.sort(key=lambda n: n.number, reverse=True)
      leading = affected[0].clone()
      # invert slides (switch from/to)
      for n in affected:
        # note number: change relative to leading note
        n.number += s.number - leading.number
        # other properties: set to end of slide value
        n.pan = s.pan
        n.velocity = s.velocity
        n.release = s.release
        n.fcut = s.fcut
        n.fres = s.fres
      s.number = leading.number
      # other properties: set to initial leading note values
      s.pan = leading.pan
      s.velocity = leading.velocity
      s.release = leading.release
      s.fcut = leading.fcut
      s.fres = leading.fres

  # then reverse the whole thing
  for note in notes:
    note.time = t1 - (note.time - t0 + note.length)                 
