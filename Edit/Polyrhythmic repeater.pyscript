"""flp
Title: Polyrhythmic repeater
Author: BinaryBorn
Category: Edit
Version: 1.1
License: ISC

Description: 
Repeat your notes at different rates.

Changelog:
v1.0 (2024-02-02)
  - initial version

v1.1 (2024-09-12)
  - added hints
"""

import flpianoroll as flp

def createDialog():
  form = flp.ScriptDialog("Polyrhythmic repeater","Repeat your notes at different rates."
  + "\r\nSequence length is in bars."
  + "\r\n\r\nv1.1 (2024-09-12), BinaryBorn")
  form.AddInputKnobInt('Sequence length', 4, 1, 256, hint='Sequence length (bars)')
  form.AddInputCombo('Iterate by', ['note (top down)', 'note (bottom up)', 'color'], 0, hint='How to iterate through incoming notes')
  form.AddInputKnobInt('Repetitions start', 4, 2, 1024, hint='Lowest number of repetitions')
  form.AddInputCheckbox('Add terminal', True, hint='Whether to add the final note')
  
  return form

def apply(form: flp.ScriptDialog):
  # get current notes
  notes = [flp.score.getNote(i) for i in range(flp.score.noteCount)]

  if not notes: return

  ppq = flp.score.PPQ
  ttot = int(form.GetInputValue('Sequence length')) * 4 * ppq
  iterMode = int(form.GetInputValue('Iterate by'))
  repCnt = int(form.GetInputValue('Repetitions start'))
  optTerminal = 1 if int(form.GetInputValue('Add terminal')) else 0

  # order notes according to iteration mode
  if iterMode == 0:
    # top down
    notes.sort(key=lambda n: -n.number)
  elif iterMode == 1:
    # bottom up
    notes.sort(key=lambda n: n.number)
  elif iterMode == 2:
    # color
    notes.sort(key=lambda n: n.color)

  for n in notes:
    for i in range(1, repCnt + optTerminal):
      toff = round(ttot * i / repCnt)
      note = n.clone()
      note.time += toff
      flp.score.addNote(note)
    # increase repetitions count for next iteration
    repCnt += 1