"""flp
Title: Rotate
Author: BinaryBorn
Category: Edit
Version: 1.2
License: ISC

Description: 
Rotate score along the time axis.

Changelog:
v1.0 (2023-09-14)
  - initial version

v1.1 (2023-10-20)
  - switched to getTimelineSelection()

v1.2 (2024-09-12)
  - added hints
"""

import flpianoroll as flp

def getTimeRange(notes: list[flp.Note]) -> tuple[int, int]:
  """Returns the time range spanning notes.
  """
  if len(notes) == 0: return (0, 0)
  # find first starting and last ending note
  first = min(notes, key=lambda n: n.time)
  last = max(notes, key=lambda n: n.time + n.length)
  # return start and end time
  return (first.time, last.time + last.length)


def createDialog():
  form = flp.ScriptDialog("Rotate","Rotate score along the time axis."
  + "\r\n\r\nv1.2 (2024-09-12), BinaryBorn")
  form.AddInputKnobInt('Rotation', 0, -flp.score.noteCount, flp.score.noteCount, hint='Phase rotation')
  
  return form


def apply(form: flp.ScriptDialog):
  rotation = int(form.GetInputValue('Rotation'))

  noteCount = flp.score.noteCount

  # get current notes
  notes = [flp.score.getNote(i) for i in range(noteCount)]
  # order by start time
  notes.sort(key=lambda n: (n.time, n.number))

  times = getTimeRange(notes)
  # times = flp.score.getTimelineSelection()
  t0 = times[0]
  t1 = times[1]

  # gather virtual note lengths (= delta time to next note)
  vlengths = [0] * noteCount
  for i in range(noteCount - 1):
    vlengths[i] = notes[i + 1].time - notes[i].time
  # use end of time range as that's not necessarily last note's end time
  vlengths[noteCount - 1] = t1 - notes[noteCount - 1].time

  # move note start times to other notes
  for i in range(noteCount):
    itarget = (i - rotation) % noteCount
    if (itarget < 0): itarget += noteCount
    notes[itarget].time = t0
    t0 += vlengths[itarget]
