"""flp
Title: Juggler
Author: BinaryBorn
Category: Edit
Version: 1.3
License: ISC

Description: 
Shuffle existing notes to spice up sliced beats.

Changelog:
v1.0 (2023-07-18)
  - initial version

v1.1 (2023-09-21)
  - added ISC license text

v1.2 (2023-10-02)
  - added dialog with seed knob

v1.3 (2024-09-12)
  - changed seed range to 999 for better UX
  - added hints
"""

import flpianoroll as flp
import _random

random = _random.Random()

def getTimeRange(notes: list[flp.Note]) -> tuple[int, int]:
  """Returns the time range spanning notes.
  """
  if len(notes) == 0: return (0, 0)
  # find first starting and last ending note
  first = min(notes, key=lambda n: n.time)
  last = max(notes, key=lambda n: n.time + n.length)
  # return start and end time
  return (first.time, last.time + last.length)


def createDialog():
  form = flp.ScriptDialog("Juggler","Shuffle existing notes to spice up sliced beats."
  + "\r\nIf seed is 0, a new random sequence is generated every time."
  + "\r\n\r\nv1.3 (2024-09-12), BinaryBorn")
  form.AddInputKnobInt('Seed', 0, 0, 999, hint='Seed for random number generator')
  
  return form

def apply(form: flp.ScriptDialog):
  # set seed if seed is nonzero, otherwise use system time (default)
  seed = int(form.GetInputValue('Seed'))
  if seed > 0:
    random.seed(seed)
  else:
    random.seed()
    
  # get current notes
  notes = [flp.score.getNote(i) for i in range(flp.score.noteCount)]
  times = getTimeRange(notes)
  t0 = times[0]
  t1 = times[1]

  # re-order randomly
  notes.sort(key = lambda n: random.random())

  # move notes in source time range
  t = t0
  for note in notes:
    note.time = t
    t += note.length
