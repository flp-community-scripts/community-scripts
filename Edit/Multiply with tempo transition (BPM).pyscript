"""flp
Title: Multiply with tempo transition (BPM)
Author: BinaryBorn
Category: Edit
Version: 1.1
License: ISC

Description: 
Repeats notes with a tempo transition from one tempo to another.

Changelog:
v1.0 (2024-06-10)
  - initial version

v1.1 (2024-09-12)
  - added hints
"""

import flpianoroll as flp
from tempotransition import TempoTransition
import math

def getTimeRange(notes: list[flp.Note]) -> tuple[int, int]:
  """Returns start and end time of list of notes.
  """
  if len(notes) == 0: return (0, 0)
  # find first starting and last ending note
  first = min(notes, key=lambda n: n.time)
  last = max(notes, key=lambda n: n.time + n.length)
  # return start and end time
  return (first.time, last.time + last.length)

# check for timeline selection
selection = flp.score.getTimelineSelection()

def createDialog():
  form = flp.ScriptDialog("Multiply with tempo transition (BPM)","Match project BPM to current BPM to get expected results."
  + "\r\nDuration is in beats."
  + "\r\nPhase correction is only relevant when the transition doesn't fit the transition duration exactly, the transition will then include a whole number multiple of the sequence. Phase correction tension defines how immediate the correction is applied - higher values will correct faster."
  + "\r\n\r\nv1.1 (2024-09-12), BinaryBorn")
  form.AddInputKnob('Start BPM', 120, 10, 522, hint='Start tempo')
  form.AddInputKnob('End BPM', 240, 10, 522, hint='End tempo')
  form.AddInputKnobInt('Copies before', 0, 0, 16, hint='Copies before transition')
  form.AddInputKnobInt('Copies after', 0, 0, 16, hint='Copies after transition')
  form.AddInputKnobInt('Duration', 8, 1, 32 * 16, hint='Transition duration in beats')
  form.AddInputKnob('Project BPM', 120, 10, 522, hint='Project tempo')
  form.AddInputCombo('Sweep', ['note frequency', 'note length'], 0, hint='Sweep property')
  form.AddInputKnob('Tension', 0, -1, 1, hint='Sweep tension')
  form.AddInputCombo('Phase correction', ['none', 'stretch', 'squash'], 0, hint='How to fit transition')
  form.AddInputKnob('Ph. corr. tension', 0, -1, 1, hint='Phase correction tension')
  form.AddInputCheckbox('Markers', True, hint='Place markers for transition start/end')
  
  return form

def apply(form: flp.ScriptDialog):
  ppq = flp.score.PPQ

  # get current notes
  notesCnt = flp.score.noteCount
  notes = [flp.score.getNote(i) for i in range(notesCnt)]

  if not notes: return

  # try using timeline selection
  selection = flp.score.getTimelineSelection()
  # ... fall back to notes' range when no timeline selection was made
  if (selection[1] == -1): selection = getTimeRange(notes)
  selt0 = selection[0]
  selt1 = selection[1]
  seldt = selt1 - selt0

  # pulses per copy (the more, the finer the interpolation)
  ppc = math.ceil(seldt / ppq * 4)
  # notes per copy
  npc = notesCnt

  bpm = float(form.GetInputValue('Project BPM'))

  # convert to pulse length (take selection length)
  l0 = seldt / (float(form.GetInputValue('Start BPM')) / bpm)
  l1 = seldt / (float(form.GetInputValue('End BPM')) / bpm)
  # duration in ticks
  dt = int(form.GetInputValue('Duration')) * ppq

  p0 = int(form.GetInputValue('Copies before'))
  p1 = int(form.GetInputValue('Copies after'))

  mode = int(form.GetInputValue('Sweep'))
  tension = float(form.GetInputValue('Tension'))

  corr = int(form.GetInputValue('Phase correction'))
  corrTension = float(form.GetInputValue('Ph. corr. Tension'))

  optMarkers = int(form.GetInputValue('Markers'))

  transition = TempoTransition(l0, l1, dt, p0, p1, ppc, mode, tension, corr, corrTension)

  # number of pulses, copies and notes
  ptot = len(transition.pulses)
  ctot = math.floor(ptot / ppc)
  ntot = ctot * npc

  def getPulse(i: int) -> float:
    "Returns pulse time at given index - extrapolates if index too big"
    if i < ptot:
      return transition.pulses[i]
    return transition.pulses[-1] + (i - ptot + 1) * l1

  def mapTime(time: int) -> int:
    "Maps in time onto the pulse grid"
    it = time / seldt * ppc
    i0 = math.floor(it)
    f = it - i0
    t0 = getPulse(i0)
    if f == 0:
      return round(t0)
    t1 = getPulse(i0 + 1)
    dt = t1 - t0
    return round(t0 + f * dt)
  
  flp.score.clearNotes()

  for i in range(ntot):
    c = math.floor(i / npc)
    coff = c * seldt
    n = notes[i % npc]
    nt0 = n.time - selt0 + coff
    nt1 = nt0 + n.length
    t0 = mapTime(nt0)
    t1 = mapTime(nt1)
    note = n.clone()
    note.time = t0 + selt0
    note.length = t1 - t0
    flp.score.addNote(note)

  if optMarkers:
    m0 = flp.Marker()
    m0.name = 'Transition start'
    m0.time = transition.t0 + selt0
    flp.score.addMarker(m0)
    m1 = flp.Marker()
    m1.name = 'Transition end'
    m1.time = transition.t1 + selt0
    flp.score.addMarker(m1)