"""flp
Title: Morse
Author: BinaryBorn
Category: Generate (creative)
Version: 1.1
License: ISC

Description: 
Generates absolutely random, unquantized notes.

Changelog:
v1.0 (2023-10-23)
  - initial version

v1.1 (2024-03-15)
  - CHANGED note properties now consider current defaults
"""

import flpianoroll as flp

dictionary = {
  'A': '.-',
  'B': '-...',
  'C': '-.-.',
  'D': '-..',
  'E': '.',
  'F': '..-.',
  'G': '--.',
  'H': '....',
  'I': '..',
  'J': '.---',
  'K': '-.-',
  'L': '.-..',
  'M': '--',
  'N': '-.',
  'O': '---',
  'P': '.--.',
  'Q': '--.-',
  'R': '.-.',
  'S': '...',
  'T': '-',
  'U': '..-',
  'V': '...-',
  'W': '.--',
  'X': '-..-',
  'Y': '-.--',
  'Z': '--..',
  '1': '.----',
  '2': '..---',
  '3': '...--',
  '4': '....-',
  '5': '.....',
  '6': '-....',
  '7': '--...',
  '8': '---..',
  '9': '----.',
  '0': '-----',
  # these would be saved as combined characters in UTF-8 editors, so use ascii code as reference
  chr(192): '.--.-', # À
  chr(197): '.--.-', # Å
  chr(196): '.-.-', # Ä
  chr(200): '.-..-', # È
  chr(201): '..-..', # É
  chr(214): '---.', # Ö
  chr(220): '..--', # Ü
  chr(209): '--.--', # Ñ
  '.': '.-.-.-',
  ',': '--..--',
  ':': '---...',
  ';': '-.-.-.',
  '?': '..--..',
  '!': '-.-.--',
  '-': '-....-',
  '_': '..--.-',
  '(': '-.--.',
  ')': '-.--.-',
  "'": '.----.',
  '=': '-...-',
  '+': '.-.-.',
  '/': '-..-.',
  '@': '.--.-.',
  '"': '.-..-.',
  '&': '.-...',
  '$': '...-..-',
  # see above
  chr(191): '..-.-', # ¿
  chr(161): '--...-' # ¡
}

def createDialog():
  form = flp.ScriptDialog("Morse","Translates input text to morse code."
  + "\r\n\r\nv1.1 (2024-03-15), BinaryBorn")
  form.AddInputKnobInt('Note', 60, 0, 131)
  form.AddInputCombo('Unit length', ['1/1 (1 bar)', '1/2', '1/3', '1/4 (1 beat)', '1/6', '1/8', '1/12', '1/16 (1 step)', '1/24', '1/32', '1/48', '1/64'], 7)
  form.AddInputText('Text', 'Hello World')
  
  return form

def apply(form: flp.ScriptDialog):
  root = form.GetInputValue('Note')
  text = form.GetInputValue('Text').upper()
  length = form.GetInputValue('Unit length')
  lengthTicks = int([1, 1/2, 1/3, 1/4, 1/6, 1/8, 1/12, 1/16, 1/24, 1/32, 1/48, 1/64][length] * 4 * flp.score.PPQ)

  newNotes = []
  u = 0

  # adds symbol (either . or -)
  def addSymbol(symbol):
    nonlocal u
    # add inter-element gap
    if u > 0: u += 1
    du = 3 if symbol == '-' else 1
    note = flp.score.getDefaultNoteProperties().clone()
    note.number = root
    note.time = u * lengthTicks
    note.length = du * lengthTicks
    newNotes.append(note)
    u += du

  # adds gap between letters
  def addLetterGap():
    nonlocal u
    # letter gap is 3 units, but inter-element will add another one
    u += 2

  # adds gap between words
  def addWordGap():
    nonlocal u
    # word gap is 7 units, but inter-element will add another one
    u += 6

  # go through all chars
  for i in range(len(text)):
    char = text[i]
    # look it up in the dictionary
    if char in dictionary:
      code = dictionary[char]
      for j in range(len(code)):
        addSymbol(code[j])
      addLetterGap()
    elif char == ' ':
      addWordGap()
  
  # add those notes to existing score
  for note in newNotes:
    flp.score.addNote(note)
