"""flp
Title: Text to notes
Author: Anuman & BinaryBorn
Category: Generate (creative)
Version: 1.3
License: ISC

Description: 
Transform all characters in text to notes (A = first, B = second...).

Changelog:
v1.0 (2023-10-23)
  - initial version

v1.1 (2024-03-08)
  - FIXED typings for Python engine upgrade

v1.2 (2024-03-15)
  - CHANGED note properties now consider current defaults

v1.3 (2024-09-12)
  - added hints
"""

import flpianoroll as flp

def createDialog():
  form = flp.ScriptDialog("Text to notes","Transform all characters in text to notes (A = first, B = second...)."
  + "\r\nThe script is case insensitive (A = a)."
  + "\r\n\r\nv1.3 (2024-09-12), Anuman & BinaryBorn")
  form.AddInputKnobInt('Root note', 48, 0, 131, hint='MIDI note')
  form.AddInputCombo('Note length', ['1/1 (1 bar)', '1/2', '1/3', '1/4 (1 beat)', '1/6', '1/8', '1/12', '1/16 (1 step)', '1/24', '1/32', '1/48', '1/64'], 7, hint='Length of every note')
  form.AddInputText('Text', 'Hello World', hint='Text to transform')
  
  return form

def apply(form: flp.ScriptDialog):
  root = int(form.GetInputValue('Root note'))
  text = str(form.GetInputValue('Text')).upper()
  length = int(form.GetInputValue('Note length'))
  lengthTicks = int([1, 1/2, 1/3, 1/4, 1/6, 1/8, 1/12, 1/16, 1/24, 1/32, 1/48, 1/64][length] * 4 * flp.score.PPQ)

  newNotes: list[flp.Note] = []

  # valid char range
  c0 = ord('A')
  c1 = ord('Z')

  # go through all chars
  for i in range(len(text)):
    c = ord(text[i])
    # put valid chars as note
    if c >= c0 and c <= c1:
      note = flp.score.getDefaultNoteProperties().clone()
      note.number = root + (c - c0)
      note.time = i * lengthTicks
      note.length = lengthTicks
      newNotes.append(note)
  
  # add those notes to existing score
  for note in newNotes:
    flp.score.addNote(note)
