"""flp
Title: Draw triangle (kaki demo)
Author: BinaryBorn
Category: Packages/kaki
Version: 1.0
License: ISC

Description: 
Demonstrates how a triangle is drawn in kaki and how the z-buffer and fog interplay.

Changelog:
v1.0 (2024-05-06)
  - initial version

v1.1 (2024-07-10)
  - each new triangle now gets its own group index
"""

import flpianoroll as flp
import kaki

def createDialog():
  form = flp.ScriptDialog("Draw triangle (kaki demo)","Demonstrates how a triangle is drawn in kaki and how the z-buffer and fog interplay."
  + "\r\n\r\nv1.0 (2024-05-06), BinaryBorn")
  form.AddInputKnobInt('Point 1 x', 0, 0, 128)
  form.AddInputKnobInt('Point 1 y', 48, 0, 131)
  form.AddInputKnobInt('Point 1 z', 0, -128, 128)
  form.AddInputText('Point 1 style', 'velocity: 0.78; pan: 0.0; color: 0')
  form.AddInputKnobInt('Point 2 x', 32, 0, 128)
  form.AddInputKnobInt('Point 2 y', 60, 0, 131)
  form.AddInputKnobInt('Point 2 z', 0, -128, 128)
  form.AddInputText('Point 2 style', 'velocity: 0.78; pan: 0.5; color: 8')
  form.AddInputKnobInt('Point 3 x', 16, 0, 128)
  form.AddInputKnobInt('Point 3 y', 72, 0, 131)
  form.AddInputKnobInt('Point 3 z', 0, -128, 128)
  form.AddInputText('Point 3 style', 'velocity: 0.78; pan: 1.0; color: 15')
  form.AddInputCombo('Oversample', ['--', '4x MSAA', '16x MSAA'], 0)
  form.AddInputKnob('Fog near', 0, -128, 128)
  form.AddInputKnob('Fog far', -128, -128, 128)

  return form

def apply(form: flp.ScriptDialog):
  x1 = form.GetInputValue('Point 1 x')
  y1 = form.GetInputValue('Point 1 y')
  z1 = form.GetInputValue('Point 1 z')
  style1 = form.GetInputValue('Point 1 style')
  x2 = form.GetInputValue('Point 2 x')
  y2 = form.GetInputValue('Point 2 y')
  z2 = form.GetInputValue('Point 2 z')
  style2 = form.GetInputValue('Point 2 style')
  x3 = form.GetInputValue('Point 3 x')
  y3 = form.GetInputValue('Point 3 y')
  z3 = form.GetInputValue('Point 3 z')
  style3 = form.GetInputValue('Point 3 style')
  fog0 = form.GetInputValue('Fog near')
  fog1 = form.GetInputValue('Fog far')

  optOversample = form.GetInputValue('Oversample')

  # create a vector at each coordinate
  p1 = kaki.vec4(x1, y1, z1)
  p2 = kaki.vec4(x2, y2, z2)
  p3 = kaki.vec4(x3, y3, z3)

  # put them together to a list of vertices
  verts = [p1, p2, p3]

  # create a list of phenotypes (one per vertex)
  phenos = ([
    kaki.parsePhenotypeFromStyle(style1),
    kaki.parsePhenotypeFromStyle(style2),
    kaki.parsePhenotypeFromStyle(style3),
  ])

  # create a buffer with z-buffer data big enough to hold the triangle
  bbox = kaki.getBoundingBox(verts, True)

  buffer = kaki.Buffer(bbox.x1 - bbox.x0, bbox.y1 - bbox.y0, optOversample, True)
  buffer.setOrigin(bbox.x0, bbox.y0)

  # render the triangle (from list of vertices and phenotypes) onto the buffer
  kaki.drawTriangle(buffer, verts, phenos)

  # apply fog based on z-buffer data
  buffer.fog(fog0, fog1)

  # render the buffer to piano roll notes
  newNotes = kaki.render(buffer, bbox.x0, bbox.y0)

  g = flp.score.getNextFreeGroupIndex()
  for n in newNotes:
    n.group = g
    flp.score.addNote(n)