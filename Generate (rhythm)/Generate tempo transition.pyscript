"""flp
Title: Generate tempo transition
Author: BinaryBorn
Category: Generate (rhythm)
Version: 1.8
License: ISC

Description: 
Generate a transition from one rate to another.

Changelog:
v1.0 (2023-07-11)
  - initial version

v1.1 (2023-07-17)
  - replaced tension function

v1.2 (2023-09-21)
  - added ISC license text

v1.3 (2024-03-15)
  - CHANGED note properties now consider current defaults

v1.4 (2024-05-30)
  - ADDED delta length tempo change mode
  - CHANGED max frequency now depends on PPQ
  - CHANGED timeline selection now offsets generated score

v1.5 (2024-05-31)
  - ADDED sweep tension
  - CHANGED mode wording to sweep
  - CHANGED calculation is now discrete instead of algebraically correct
  - ADDED zero length notes option

v1.6 (2024-06-10)
  - CHANGED calculation is now done by TempoTransition utility class
  - ADDED markers option
  - CHANGED last pulse not included any more
  - FIXED division by zero error

v1.7 (2024-07-10)
  - ADDED note grouping

v1.8 (2024-09-11)
  - added hints
"""

import flpianoroll as flp
from tempotransition import TempoTransition

# check for timeline selection
selection = flp.score.getTimelineSelection()

def createDialog():
  form = flp.ScriptDialog("Generate tempo transition","Start and end freq are in 'pulses per whole note'."
  + "\r\nDuration is in beats."
  + "\r\nPhase correction is only relevant when the transition doesn't fit the transition duration exactly. Phase correction tension defines how immediate the correction is applied - higher values will correct faster."
  + "\r\n\r\nv1.8 (2024-09-11), BinaryBorn")

  # fmax = flp.score.PPQ * 4 # actual technical maximum
  fmax = flp.score.PPQ # feels like the better UX choice

  duration = 16
  if selection[1] != -1:
    duration = round((selection[1] - selection[0]) / flp.score.PPQ)

  form.AddInputKnobInt('Start freq', 4, 1, fmax, hint='Pulses per bar')
  form.AddInputKnobInt('End freq', 8, 1, fmax, hint='Pulses per bar')
  form.AddInputKnobInt('Pulses before', 0, 0, 16, hint='Pulses before transition')
  form.AddInputKnobInt('Pulses after', 0, 0, 16, hint='Pulses after transition')
  form.AddInputKnobInt('Duration', duration, 1, 32 * 16, hint='Transition duration in beats')
  form.AddInputCombo('Sweep', ['pulse frequency', 'pulse length'], 0, hint='Sweep property')
  form.AddInputKnob('Tension', 0, -1, 1, hint='Sweep tension')
  form.AddInputKnobInt('Note', 60, 0, 131, hint='MIDI note')
  form.AddInputCombo('Phase correction', ['none', 'stretch', 'squash'], 0, hint='How to fit transition')
  form.AddInputKnob('Ph. corr. tension', 0, -1, 1, hint='Phase correction tension')
  form.AddInputCheckbox('Zero length notes', False, hint='Place notes without length')
  form.AddInputCheckbox('Markers', False, hint='Place markers for transition start/end')
  
  return form

def apply(form: flp.ScriptDialog):
  ppq = flp.score.PPQ

  offset = 0
  if selection[1] != -1:
    offset = selection[0]

  # convert freq (1 per 4 beats) to pulse length
  l0 = 4 * ppq / int(form.GetInputValue('Start freq'))
  l1 = 4 * ppq / int(form.GetInputValue('End freq'))
  # duration in ticks
  dt = int(form.GetInputValue('Duration')) * ppq

  p0 = int(form.GetInputValue('Pulses before'))
  p1 = int(form.GetInputValue('Pulses after'))

  mode = int(form.GetInputValue('Sweep'))
  tension = float(form.GetInputValue('Tension'))

  corr = int(form.GetInputValue('Phase correction'))
  corrTension = float(form.GetInputValue('Ph. corr. Tension'))

  noteNr = int(form.GetInputValue('Note'))
  zeroLength = bool(form.GetInputValue('Zero length notes'))

  optMarkers = int(form.GetInputValue('Markers'))

  transition = TempoTransition(l0, l1, dt, p0, p1, sweepMode=mode, tension=tension, phaseMode=corr, phaseTension=corrTension)

  g = flp.score.getNextFreeGroupIndex()
  for i in range(len(transition.pulses) - 1):
    t0 = transition.pulses[i]
    t1 = transition.pulses[i+1]
    # only append notes that actually have space to be placed
    if t1 > t0:
      note = flp.score.getDefaultNoteProperties().clone()
      note.number = noteNr
      note.time = t0 + offset
      note.length = 0 if zeroLength else t1 - t0
      note.group = g
      flp.score.addNote(note)
  
  if optMarkers:
    m0 = flp.Marker()
    m0.name = 'Transition start'
    m0.time = transition.t0 + offset
    flp.score.addMarker(m0)
    m1 = flp.Marker()
    m1.name = 'Transition end'
    m1.time = transition.t1 + offset
    flp.score.addMarker(m1)
