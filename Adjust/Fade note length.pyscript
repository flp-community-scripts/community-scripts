"""flp
Title: Fade note length
Author: BinaryBorn
Category: Adjust
Version: 1.4
License: ISC

Description: 
Fade note lengths from one length to another.

Changelog:
v1.0 (2023-06-30)
  - initial version

v1.1 (2023-07-01)
  - fixed error when used on empty score

v1.2 (2023-09-14)
  - added ISC license text

v1.3 (2024-03-08)
  - fixed typings for Python engine upgrade

v2.0 (2024-09-11)
  - added length unit options
  - added tension

v2.1 (2024-09-11)
  - added hints
"""

import flpianoroll as flp
import math

def getTimeRange(notes: list[flp.Note]) -> tuple[int, int]:
  """Returns the time range spanning notes.
  """
  if len(notes) == 0: return (0, 0)
  # find first starting and last ending note
  first = min(notes, key=lambda n: n.time)
  last = max(notes, key=lambda n: n.time + n.length)
  # return start and end time
  return (first.time, last.time + last.length)

def Tension(value: float, rate: float, knob=True):
  """Applies the FL Studio Tension function to a value.

  Args:
    value (float): value to skew
    rate (float): tension rate
    knob (bool): if True, function behaves like the one behind knobs (e.g. scale levels), if False, it behaves like the one in Formula Controller
  """
  if rate == 0: return value
  # rate mapping
  R = rate
  if not knob and rate > 0:
    R = math.log2(rate + 1) / 10
  elif not knob and rate < 0:
    R = -math.log2(-rate + 1) / 10
  # f(x,R) = (2^(-10*R*x)-1)/(2^(-10*R)-1)
  return (pow(2, -10 * R * value) - 1) / (pow(2, -10 * R) - 1)

def createDialog():
  form = flp.ScriptDialog("Fade note length","Fade note lengths from one length to another."
  + "\r\n\r\nv2.0 (2024-09-11), BinaryBorn")
  form.AddInputKnob('Start length', 1, 0, 16, hint='Length modifier for notes at the start')
  form.AddInputCombo('Start unit', ['Multiply', 'Step', 'Beat', 'Bar'], 0, hint='Unit for start length modifier')
  form.AddInputKnob('End length', 1, 0, 16, hint='Length modifier for notes at the end')
  form.AddInputCombo('End unit', ['Multiply', 'Step', 'Beat', 'Bar'], 0, hint='Unit for end length modifier')
  form.AddInputCombo('Interpolate by', ['Time', 'Note number'], 0, hint='By what to interpolate')
  form.AddInputKnob('Tension', 0, -1, 1, hint='Interpolation tension')
  return form

def apply(form: flp.ScriptDialog):
  ppq = flp.score.PPQ
  pp16th = ppq // 4
  ppbar = ppq * 4

  noteCount = flp.score.noteCount

  value0 = float(form.GetInputValue('Start length'))
  unit0 = int(form.GetInputValue('Start unit'))
  value1 = float(form.GetInputValue('End length'))
  unit1 = int(form.GetInputValue('End unit'))
  mode = int(form.GetInputValue('Interpolate by'))
  tension = float(form.GetInputValue('Tension'))

  # get current notes
  notes = [flp.score.getNote(i) for i in range(noteCount)]
  # order by start time
  notes.sort(key=lambda n: (n.time, n.number))

  # start and end time / index
  times = getTimeRange(notes)
  t0 = times[0]
  t1 = times[1]
  dt = t1 - t0
  i0 = 0
  i1 = noteCount - 1
  di = i1 - i0

  def getTargetLength(initial: int, value: float, unit: int) -> float:
    "Returns target note length for value/unit in ticks"
    if unit == 1:
      return value * pp16th
    elif unit == 2:
      return value * ppq
    elif unit == 3:
      return value * ppbar
    return initial * value

  # go through all notes and fade length
  idx = 0
  for note in notes:
    # note time / index
    if mode == 0:
      jrel = (note.time - t0) / dt
    else:
      jrel = idx / di
    # calculate target length for both start and end values and interpolate
    length0 = getTargetLength(note.length, value0, unit0)
    length1 = getTargetLength(note.length, value1, unit1)
    dlength = length1 - length0

    note.length = int(max(1, length0 + dlength * Tension(jrel, tension)))

    idx += 1

