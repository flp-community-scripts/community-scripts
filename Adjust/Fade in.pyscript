"""
Title: Fade in
Author: BinaryBorn
Category: Adjust
Version: 1.4
License: ISC

Description:
Fade velocity in from intial percentage.

Changelog:
v1.0 (2023-06-30)
  - initial version

v1.1 (2023-07-01)
  - fixed error when used on empty score
  - added GUI
  - added option for initial %
  - added option for interpolation point (start, mid, end)

v1.2 (2023-09-14)
  - added ISC license text

v1.3 (2023-10-02)
  - added tension knob

v1.4 (2024-09-11)
  - updated typings
  - added hints
"""

import flpianoroll as flp
import math

def getTimeRange(notes: list[flp.Note]) -> tuple[int, int]:
  """Returns the time range spanning notes.
  """
  if len(notes) == 0: return (0, 0)
  # find first starting and last ending note
  first = min(notes, key=lambda n: n.time)
  last = max(notes, key=lambda n: n.time + n.length)
  # return start and end time
  return (first.time, last.time + last.length)

def Tension(value: float, rate: float, knob=True):
  """Applies the FL Studio Tension function to a value.

  Args:
    value (float): value to skew
    rate (float): tension rate
    knob (bool): if True, function behaves like the one behind knobs (e.g. scale levels), if False, it behaves like the one in Formula Controller
  """
  if rate == 0: return value
  # rate mapping
  R = rate
  if not knob and rate > 0:
    R = math.log2(rate + 1) / 10
  elif not knob and rate < 0:
    R = -math.log2(-rate + 1) / 10
  # f(x,R) = (2^(-10*R*x)-1)/(2^(-10*R)-1)
  return (pow(2, -10 * R * value) - 1) / (pow(2, -10 * R) - 1)


def createDialog():
  form = flp.ScriptDialog("Fade in","Fade velocity in from intial percentage."
  + "\r\n\r\nv1.4 (2024-09-11), BinaryBorn")
  form.AddInputKnobInt('Initial', 1, 0, 100, hint='Initial velocity percentage')
  form.AddInputCombo('Interpolate at', ['Note start', 'Note center', 'Note end'], 0, hint='Point in note to take for interpolation')
  form.AddInputKnob('Tension', 0, -1, 1, 'Fade tension')
  
  return form

def apply(form: flp.ScriptDialog):
  f0 = float(form.GetInputValue('Initial')) / 100
  f1 = 1
  df = f1 - f0
  mode = int(form.GetInputValue('Interpolate at'))
  tension = float(form.GetInputValue('Tension'))

  # get current notes
  notes = [flp.score.getNote(i) for i in range(flp.score.noteCount)]

  # time range
  times = getTimeRange(notes)
  t0 = times[0]
  t1 = times[1]
  dt = t1 - t0

  # interpolate
  lmul = mode / 2 # how much to consider note length
  for note in notes:
    t = note.time - t0 + note.length * lmul
    f = f0 + df * Tension(t / dt, tension)
    note.velocity *= f
