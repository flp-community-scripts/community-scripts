"""
ISC License

Copyright 2023 Olivier Stuker a.k.a. BinaryBorn

Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
"""

import flpianoroll as flp

"""
Velocity tracking
by: BinaryBorn

2023-07-14
  - initial version

CHANGES
2023-07-17
  - changed sensitivity
  - added note.release

2023-10-16
  - added ISC license text

2023-11-02
  - added note length
  - added note color

2024-03-08
  - FIXED typings for Python engine upgrade
"""

# note.release is not yet supported

def createDialog():
  form = flp.ScriptDialog("Velocity tracking","Change note properties based on their velocity."
  + "\r\n\r\n2024-03-08, BinaryBorn")
  form.AddInputCombo('Set pan', ['leave', 'set', 'add'], 0)
  form.AddInputKnob('Pan', 0, -1, 1)
  form.AddInputCombo('Set release', ['leave', 'set', 'add'], 0)
  form.AddInputKnob('Release', 0, -1, 1)
  form.AddInputCombo('Set filter cutoff', ['leave', 'set', 'add'], 0)
  form.AddInputKnob('Filter cutoff', 0, -1, 1)
  form.AddInputCombo('Set filter resonance', ['leave', 'set', 'add'], 0)
  form.AddInputKnob('Filter resonance', 0, -1, 1)
  form.AddInputCombo('Set pitch', ['leave', 'set', 'add'], 0)
  form.AddInputKnob('Pitch', 0, -1, 1)
  form.AddInputCombo('Set length', ['leave', 'set', 'add'], 0)
  form.AddInputKnob('Length', 0, -1, 1)
  form.AddInputCombo('Set color', ['leave', 'set', 'add'], 0)
  form.AddInputKnob('Color', 0, -0.5, 0.5)
  form.AddInputKnobInt('Center value', 78, 0, 100)
  return form

def apply(form):
  # get current notes
  notes = [flp.score.getNote(i) for i in range(flp.score.noteCount)]

  # set their levels
  setPan = int(form.GetInputValue('Set pan'))
  pan = float(form.GetInputValue('Pan')) / 100
  setRelease = int(form.GetInputValue('Set release'))
  release = float(form.GetInputValue('Release')) / 100
  setFCut = int(form.GetInputValue('Set filter cutoff'))
  fcut = float(form.GetInputValue('Filter cutoff')) / 100
  setFRes = int(form.GetInputValue('Set filter resonance'))
  fres = float(form.GetInputValue('Filter resonance')) / 100
  setPitch = int(form.GetInputValue('Set pitch'))
  pitch = float(form.GetInputValue('Pitch')) * 12 / 10 # the range here is -120 ... 120
  setLength = int(form.GetInputValue('Set length'))
  length = float(form.GetInputValue('Length'))
  setColor = int(form.GetInputValue('Set color'))
  color = float(form.GetInputValue('Color'))

  center = int(form.GetInputValue('Center value'))

  ppq = flp.score.PPQ

  for note in notes:
    amount = note.velocity * 100 - center
    # for every property: add amount-scaled value,
    # reset to default first if mode is 'set'
    if setPan == 1: note.pan = 0.5
    if setPan: note.pan = min(max(note.pan + pan * amount, 0),1)
    if setRelease == 1: note.release = 0.5
    if setRelease: note.release = min(max(note.release + release * amount, 0),1)
    if setFCut == 1: note.fcut = 0.5
    if setFCut: note.fcut = min(max(note.fcut + fcut * amount, 0),1)
    if setFRes == 1: note.fres = 0.5
    if setFRes: note.fres = min(max(note.fres + fres * amount, 0),1)
    if setPitch == 1: note.pitchofs = 0
    if setPitch: note.pitchofs = int(min(max(note.pitchofs + pitch * amount, -120),120))
    # use 1/16 as default note length
    if setLength == 1: note.length = int(ppq / 4)
    if setLength: note.length = round(max(note.length + length * amount, 1))
    if setColor == 1: note.color = 0
    if setColor: note.color = int(min(max(note.color + color * amount, 0), 15))

