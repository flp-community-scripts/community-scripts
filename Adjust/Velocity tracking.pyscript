"""flp
Title: Velocity tracking
Author: BinaryBorn
Category: Adjust
Version: 2.0
License: ISC

Description: 
Change note properties based on their velocity.

Changelog:
v1.0 (2023-07-14)
  - initial version

v1.1 (2023-07-17)
  - changed sensitivity
  - added note.release

v1.2 (2023-10-16)
  - added ISC license text

v1.3 (2023-11-02)
  - added note length
  - added note color

v1.4 (2024-03-08)
  - fixed typings for Python engine upgrade

v2.0 (2024-04-10)
  - changed interface to control surface
"""

import flpianoroll as flp

def createDialog():
  form = flp.ScriptDialog("Velocity tracking","")
  form.AddInputSurface('Velocity tracking')
  return form

def apply(form):
  # get current notes
  notes = [flp.score.getNote(i) for i in range(flp.score.noteCount)]

  # set their levels
  setPan = int(form.GetInputValue('Set pan') * 2)
  pan = float(form.GetInputValue('Pan') * 2 - 1) / 10
  setRelease = int(form.GetInputValue('Set release') * 2)
  release = float(form.GetInputValue('Release') * 2 - 1) / 10
  setFCut = int(form.GetInputValue('Set mod x') * 2)
  fcut = float(form.GetInputValue('Mod x') * 2 - 1) / 10
  setFRes = int(form.GetInputValue('Set mod y') * 2)
  fres = float(form.GetInputValue('Mod y') * 2 - 1) / 10
  setPitch = int(form.GetInputValue('Set pitch') * 2)
  pitch = float(form.GetInputValue('Pitch') * 2 - 1) * 12
  setLength = int(form.GetInputValue('Set length') * 2)
  length = float(form.GetInputValue('Length') * 2 - 1) * 8
  setColor = int(form.GetInputValue('Set color') * 2)
  color = float(form.GetInputValue('Color') * 2 - 1)

  center = float(form.GetInputValue('Center velocity'))

  ppq = flp.score.PPQ
  sensitivity = 20

  for note in notes:
    amount = (note.velocity - center) * sensitivity
    # for every property: add amount-scaled value,
    # reset to default first if mode is 'set'
    if setPan == 1: note.pan = 0.5
    if setPan: note.pan = min(max(note.pan + pan * amount, 0),1)
    if setRelease == 1: note.release = 0.5
    if setRelease: note.release = min(max(note.release + release * amount, 0),1)
    if setFCut == 1: note.fcut = 0.5
    if setFCut: note.fcut = min(max(note.fcut + fcut * amount, 0),1)
    if setFRes == 1: note.fres = 0.5
    if setFRes: note.fres = min(max(note.fres + fres * amount, 0),1)
    if setPitch == 1: note.pitchofs = 0
    if setPitch: note.pitchofs = int(min(max(note.pitchofs + pitch * amount, -120),120))
    # use 1/16 as default note length
    if setLength == 1: note.length = int(ppq / 4)
    if setLength: note.length = round(max(note.length + length * amount, 1))
    if setColor == 1: note.color = 0
    if setColor: note.color = int(min(max(note.color + color * amount, 0), 15))

