"""flp
Title: Randomize note color
Author: D3Mens (idea), BinaryBorn (code)
Category: Color
Version: 1.3
License: ISC

Description: 
Randomize note color/MIDI channel.

Changelog:
v1.0 (2023-07-11)
  - initial version

v1.1 (2023-07-17)
  - replaced tension function

v1.2 (2023-10-16)
  - added ISC license text

v1.3 (2024-08-26)
  - added note deselection for visibility
  - changed seed range to 999 for better UX
"""

import flpianoroll as flp
import math
import _random

random = _random.Random()

def Tension(value: float, rate: float, knob=True):
  """Applies the FL Studio Tension function to a value.

  Args:
    value (float): value to skew
    rate (float): tension rate
    knob (bool): if True, function behaves like the one behind knobs (e.g. scale levels), if False, it behaves like the one in Formula Controller
  """
  if rate == 0: return value
  # rate mapping
  R = rate
  if not knob and rate > 0:
    R = math.log2(rate + 1) / 10
  elif not knob and rate < 0:
    R = -math.log2(-rate + 1) / 10
  # f(x,R) = (2^(-10*R*x)-1)/(2^(-10*R)-1)
  return (pow(2, -10 * R * value) - 1) / (pow(2, -10 * R) - 1)


def createDialog():
  form = flp.ScriptDialog("Randomize note color","Randomize note color/MIDI channel"
  + "\r\nIf seed is 0, a new random sequence is generated every time."
  + "\r\n\r\nv1.3 (2024-08-26), D3Mens & BinaryBorn")
  form.AddInputKnobInt('Min color', 0, 0, 15)
  form.AddInputKnobInt('Max color', 15, 0, 15)
  form.AddInputKnob('Uniform', 0, -1, 1)
  form.AddInputKnobInt('Seed', 0, 0, 999)
  
  return form

def apply(form: flp.ScriptDialog):
  # set seed if seed is nonzero, otherwise use system time (default)
  seed = int(form.GetInputValue('Seed'))
  if seed > 0:
    random.seed(seed)
  else:
    random.seed()

  col0 = int(form.GetInputValue('Min color'))
  col1 = int(form.GetInputValue('Max color'))
  dcol = col1 - col0

  tension = float(form.GetInputValue('Uniform'))

  # get current notes
  notes = [flp.score.getNote(i) for i in range(flp.score.noteCount)]

  # change colors
  for note in notes:
    colRnd = Tension(random.random(), tension)
    note.color = col0 + round(colRnd * dcol)
    # deselect note to make color noticeable
    note.selected = False
