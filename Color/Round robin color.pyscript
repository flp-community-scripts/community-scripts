"""flp
Title: Round robin color
Author: BinaryBorn
Category: Color
Version: 1.1
License: ISC

Description: 
Colors all notes cycling through the palette.

Changelog:
v1.0 (2024-01-26)
  - initial version

v1.1 (2024-08-26)
  - added note deselection for visibility
"""

import flpianoroll as flp

def createDialog():
  form = flp.ScriptDialog("Round robin color","Colors all notes cycling through the palette."
  + "\r\n\r\nv1.1 (2024-08-26), BinaryBorn")
  form.AddInputKnobInt('Min color', 0, 0, 15)
  form.AddInputKnobInt('Max color', 15, 0, 15)
  form.AddInputKnobInt('Start color', 0, 0, 15)
  
  return form

def apply(form: flp.ScriptDialog):
  # get current notes
  notes = [flp.score.getNote(i) for i in range(flp.score.noteCount)]
  # order by start time
  notes.sort(key=lambda n: (n.time, n.number))

  if not notes: return

  col0 = int(form.GetInputValue('Start color'))
  _colMin = int(form.GetInputValue('Min color'))
  _colMax = int(form.GetInputValue('Max color'))

  # make sure min is min and max is max
  colMin = min(_colMin, _colMax)
  colMax = max(_colMin, _colMax)
  # range of notes (+1 because if diff is 0, range is exactly 1 note)
  colRange = colMax - colMin + 1
  # invert counting if user selected min > max
  colAdd = 1 if _colMax > _colMin else -1

  i = 0
  for n in notes:
    # cycle through range, offset by min
    n.color = (col0 + i - colMin) % colRange + colMin
    i += colAdd
    # deselect note to make color noticeable
    n.selected = False