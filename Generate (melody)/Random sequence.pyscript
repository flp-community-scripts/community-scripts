"""
ISC License

Copyright 2023 Olivier Stuker a.k.a. BinaryBorn

Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
"""

import flpianoroll as flp
import _random

random = _random.Random()

"""
Random sequence
by: BinaryBorn

2023-10-13
  - initial version

2024-03-08
  - FIXED typings for Python engine upgrade
  - CHANGED seed range limited to 999 for better UX
"""

# gathering markers is only required once - they don't update as long as script is active

class Scale:
  __slots__ = ['time', 'notes']
  def __init__(self, time: int, notes: list[bool]):
    self.time = time
    self.notes = notes

scales: list[Scale] = []

for m in range(flp.score.markerCount):
  marker = flp.score.getMarker(m)
  # scale marker
  if marker.mode == 12:
    # scale_helper is a string in form "0,1,0,1,0,0,1,0,1,0,1,0" telling which notes (starting from C) are in the scale (0) and which aren't (1)
    # transform into array of in scale (True), not in scale (False)
    splat = marker.scale_helper.split(',')
    notes = [s == '0' for s in splat]
    # "default" scale will be all False - don't append that, invert instead
    if not max(notes) == 0:
      # append that with its starting time
      scales.append(Scale(
        time = marker.time,
        notes = notes
      ))
    else:
      scales.append(Scale(
        time = marker.time,
        notes = [True, True, True, True, True, True, True, True, True, True, True, True]
      ))


def createDialog():
  form = flp.ScriptDialog("Random sequence","Generate a random sequence."
  + "\r\nOctave jumps, Melody, Rhythm, Slides and Accents knobs are probability for random value."
  + "\r\n\r\n2024-03-08, BinaryBorn")
  form.AddInputKnobInt('Root note', 60, 48, 72)
  form.AddInputKnobInt('Sequence length', 16, 4, 64)
  form.AddInputKnob('Octave jumps', 0, 0, 1.0)
  form.AddInputCombo('Octave range', ['+1', '+2', '-1', '-1 / +1', '-1 / +2'], 0)
  form.AddInputKnob('Melody', 0, 0, 1.0)
  form.AddInputKnob('Rhythm', 0, 0, 1.0)
  form.AddInputKnob('Slides', 0, 0, 1.0)
  form.AddInputKnob('Accents', 0, 0, 1.0)
  form.AddInputKnobInt('Seed', 0, 0, 999)
  
  return form

# skewed random function
# if skew = 0, the result is always 0
# if skew = 1, the result is random
# (skew is basically the probability of a random outcome)
def skewedRandom(skew: float):
  p = random.random()
  r = random.random()
  if p >= skew:
    return 0.0
  else:
    return r

# return scale active at "time" (use "Default" as fallback)
def relevantScaleAt(time: int):
  s = Scale(
    time = 0,
    notes = [True, True, True, True, True, True, True, True, True, True, True, True]
  )

  # find latest scale before time
  for scale in scales:
    if time >= scale['time']: s = scale

  return s

# transpose note into scale
def transposeIntoScale(number: int, scale: Scale):
  # look for "True" in scale above and below original note with increasing distance
  s = scale.notes
  for t in range(12):
    if s[(number + t) % 12]: return number + t
    if s[(number - t + 12) % 12]: return number - t
  # return original if nothing was found
  return number

def apply(form):
  root = int(form.GetInputValue('Root note'))
  length = int(form.GetInputValue('Sequence length'))
  octaves = float(form.GetInputValue('Octave jumps'))
  octaveRange = int(form.GetInputValue('Octave range'))
  melody = float(form.GetInputValue('Melody'))
  rhythm = float(form.GetInputValue('Rhythm'))
  slides = float(form.GetInputValue('Slides'))
  accents = float(form.GetInputValue('Accents'))

  ppq = flp.score.PPQ

  # octave jumping works by randomly picking one of these options
  octaveOptions = [0, 1]
  if octaveRange == 1: octaveOptions = [0, 1, 2]
  if octaveRange == 2: octaveOptions = [0, -1]
  if octaveRange == 3: octaveOptions = [0, -1, 1]
  if octaveRange == 4: octaveOptions = [0, -1, 1, 2]
  octaveOptionsCnt = len(octaveOptions)

  # always seed with user provided seed
  seed = int(form.GetInputValue('Seed'))
  random.seed(seed)
    
  # generate steps (as in step sequencer)
  steps: list[dict[str, int]] = []
  for i in range(length):
    octj = int(skewedRandom(octaves) * octaveOptionsCnt)
    octn = int(octaveOptions[octj] * 12)
    meln = int(skewedRandom(melody) * 12)
    step = {
      # midi note
      'number': root + octn + meln,
      # 0: 1/16, 1: 1/32, 2: extend previous note 
      'gate': int(skewedRandom(rhythm) * 3),
      # true/false
      'slide': int(skewedRandom(slides) * 2),
      # true/false
      'accent': int(skewedRandom(accents) * 2)
    }
    steps.append(step)

  # convert steps to notes
  prevNote = False
  for i in range(len(steps)):
    step = steps[i]
    # only put first note and all that aren't gate type 2
    put = True if i == 0 else step['gate'] != 2
    if put:
      # when to put this note
      time = int(i * ppq / 4)
      # relevant marker at that time
      scale = relevantScaleAt(time)

      note = flp.Note()
      note.number = transposeIntoScale(step['number'], scale)
      note.time = time
      note.length = int(ppq / 4) if step['gate'] == 0 else int(ppq / 8)
      note.velocity = 0.78 if not step['accent'] else 1.0
      note.porta = step['slide'] == 1

      flp.score.addNote(note)
      prevNote = note

    else:
      prevNote.length += int(ppq / 4)
